#include <Adafruit_Sensor.h> // Include the Adafruit Unified Sensor library for sensor abstraction
#include <DHT.h> // Include the library for basic DHT sensor functions
#include <DHT_U.h> // Include the unified library for advanced DHT sensor functions
#define DHTPIN 2 // Define the digital pin to which the DHT11 sensor is connected
#define DHTTYPE DHT11 // Define the type of DHT sensor (DHT11)
// Create a DHT_Unified object to interact with the sensor
DHT_Unified dht(DHTPIN, DHTTYPE);
// Variable to store the minimum delay between readings (in milliseconds)
uint32_t delayMS;

void setup() {
  Serial.begin(9600); // Initialize serial communication at 9600 baud rate
  // Initialize the DHT sensor
  dht.begin();
  // Print a message to indicate that the sensor setup is starting
  Serial.println(F("DHTxx Unified Sensor Example"));

  // Create a sensor_t object to store sensor details
  sensor_t sensor;
  // Get and print temperature sensor details
  dht.temperature().getSensor(&sensor); // Retrieve temperature sensor metadata
  Serial.println(F("------------------------------------"));
  Serial.println(F("Temperature Sensor"));
  Serial.print(F("Sensor Type: ")); Serial.println(sensor.name); // Print sensor name
  Serial.print(F("Driver Ver:  ")); Serial.println(sensor.version); // Print driver version
  Serial.print(F("Unique ID:   ")); Serial.println(sensor.sensor_id); // Print unique sensor ID
  Serial.print(F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("째C")); // Max temperature
  Serial.print(F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("째C")); // Min temperature
  Serial.print(F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("째C")); // Temperature resolution
  Serial.println(F("------------------------------------"));
  // Get and print humidity sensor details
  dht.humidity().getSensor(&sensor); // Retrieve humidity sensor metadata
  Serial.println(F("Humidity Sensor"));
  Serial.print(F("Sensor Type: ")); Serial.println(sensor.name); // Print sensor name
  Serial.print(F("Driver Ver:  ")); Serial.println(sensor.version); // Print driver version
  Serial.print(F("Unique ID:   ")); Serial.println(sensor.sensor_id); // Print unique sensor ID
  Serial.print(F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("%")); // Max humidity
  Serial.print(F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("%")); // Min humidity
  Serial.print(F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("%")); // Humidity resolution
  Serial.println(F("------------------------------------"));
  // Set delay between sensor readings (minimum delay specified by the sensor)
  delayMS = sensor.min_delay / 1000; // Convert microseconds to milliseconds
}

void loop() {
  delay(delayMS); // Wait the required delay time between sensor readings
  // Create an event object to store the temperature reading
  sensors_event_t event;
  // Get temperature data and check for errors
  dht.temperature().getEvent(&event); // Read temperature data
  if (isnan(event.temperature)) {    // Check if the reading is invalid
    Serial.println(F("Error reading temperature!"));
  } else {
    // Print the temperature value to the Serial Monitor
    Serial.print(F("Temperature: "));
    Serial.print(event.temperature);
    Serial.println(F("째C"));
  }
  // Get humidity data and check for errors
  dht.humidity().getEvent(&event); // Read humidity data
  if (isnan(event.relative_humidity)) { // Check if the reading is invalid
    Serial.println(F("Error reading humidity!"));
  } else {
    // Print the humidity value to the Serial Monitor
    Serial.print(F("Humidity: "));
    Serial.print(event.relative_humidity);
    Serial.println(F("%"));
  }
}
